"""
3D Recuperación
Laura Isabel Hernández Merales 
01/02/2021
N° control C18390070
Graficación
I5U
Ing. Sistemas Computacionales
"""
import numpy as np
import matplotlib.pyplot as plt
from math import cos,sin,radians, ceil

plt.xlabel('Eje X')
plt.ylabel('Eje Y') 
plt.title('3D Triangle')

#_____Realizamos las coordenadas locales, en el pano z
x=[40,30,80,85]#Puntos de donde está el triangulo
y=[60,10,60,40]
z=[0,0,0,0]

#_____Coordenadas globales
xg=[]
yg=[]
zg=[]

#_____Definimos el centro
xc=80
yc=40
zc=40

#_____Definir las funciones de la linea
def PlotLine(xg,yg,zg):
    plt. axis([90,250,130,40])#Definimos el tamaño de la ventana 
    plt.axis('on')
    plt.grid(True)
    #_____Se realiza el tringulo A
    plt.plot([xg[0],xg[1]],[yg[0],yg[1]],color='purple')
    plt.plot([xg[1],xg[2]],[yg[1],yg[2]],color='purple')
    plt.plot([xg[2],xg[0]],[yg[2],yg[0]],color='purple')
    #_____El prunto 3 
    plt.scatter(xg[3],yg[3],s=20,color='r')
    #_____Pintar las líneas punteadas de donde estará el punto
    plt.plot([xg[0],xg[3]],[yg[0],yg[3]],color='r',linestyle='--')
    plt.plot([xg[1],xg[3]],[yg[1],yg[3]],color='r',linestyle='--')
    plt.plot([xg[2],xg[3]],[yg[2],yg[3]],color='r',linestyle='--')
    plt.show()
    
#_____Definir las funciones para el HitPoint
def HitPoint(x,y,z):
    A=x[1]-x[0]#Se realizan los puntos de esta manera porque estan definidos en 0,1
    B=x[1]-y[0]
    C=x[1]-z[0]
    Q01=np.sqrt(A*A+B*B+C*C)

    A=x[2]-x[1]#Se realizan los puntos de esta manera porque estan definidos en 1,2
    B=y[2]-y[1]
    C=z[2]-z[1]
    Q12=np.sqrt(A*A+B*B+C*C)

    A=x[2]-x[0]#Se realizan los puntos de esta manera porque estan definidos en 0,2
    B=y[2]-y[0]
    C=z[2]-z[0]
    Q02=np.sqrt(A*A+B*B+C*C)

    A=x[3]-x[1]#Se realizan los puntos de esta manera porque estan definidos en 1,3
    B=y[3]-y[1]
    C=z[3]-z[1]
    Q13=np.sqrt(A*A+B*B+C*C)

    A=x[2]-x[3]#Se realizan los puntos de esta manera porque estan definidos en 2,3
    B=y[2]-y[3]
    C=z[2]-z[3]
    Q23=np.sqrt(A*A+B*B+C*C)
    
    A=x[0]-x[3]#Se realizan los puntos de esta manera porque estan definidos en 0,3
    B=y[0]-y[3]
    C=z[0]-z[3]
    Q03=np.sqrt(A*A+B*B+C*C)

    #Se realizan las áreas dentro de las funciones
    s=(Q01+Q12+Q02)/2
    a=np.sqrt(s*(s-Q01)*(s-Q12)*(s-Q02))

    s1=(Q01+Q03+Q13)/2
    a1=np.sqrt(s1*(s1-Q01)*(s1-Q03)*(s1-Q13))

    s2=(Q02+Q23+Q03)/2
    a2=np.sqrt(s2*(s2-Q02)*(s2-Q23)*(s1-Q03))

    return a,a1,a2

#Definimos si el HitPoint está dentro o fuera de los límites
def PlotSquareLine(xc,yc,zc):
    [a,a1,a2]=HitPoint(x,y,z)

    if((a1+a2)>a):
        plt.text(180,80,'Fuera del límite')
    elif((a1+a2)<a):
        plt.text(180,80,'Dentro del límite')

    PlotLine(xg,yg,zg)

#Ciclo que nos permite seguir haciendo las operaciones hasta que el usuario pulse la tecla "W"
while True:
    #Le pedimos al usuario que ingrese las coordenadas de HitPoint
    lhx=input('Dónde se encuentra el hitpoint en el eje X? Pulse g para salir: ')
    if lhx=='g':
        break
    elif (lhx!=''):
        x[3]=int(lhx)
        lhy=input('Dónde se encuentra el hitpoint en el eje Y?: ')
        y[3]=int(lhy)

        for i in range(len(x)):
            xg.append( x[i]+xc )
            yg.append( y[i]+yc )
            zg.append( z[i]+zc )
        PlotSquareLine(xc,yc,zc)
